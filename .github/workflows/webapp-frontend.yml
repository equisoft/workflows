name: Webapp frontend

on:
  workflow_call:
    inputs:
      name:
        description: Application name. Used as base to the various artifacts.
        required: true
        type: string
      image-name:
        description: Specify a different docker image name. By default the image name is computed from the name.
        required: false
        type: string
        default: ""
      publish-image:
        description: |
          Set to `true` to enable Docker image publication. This will typically only be `false` until the ECR repository is created.
          Defaults to false.
        required: false
        default: false
        type: boolean
      workflow-path:
        description: Workflow file used for change detection.
        default: .github/workflows/webapp-frontend.yml
        required: false
        type: string
      working-directory:
        description: Relative path under $GITHUB_WORKSPACE where the project is located.
        type: string
        required: false
        default: "web"
    secrets:
      GPR_USER:
        description: A username with write access to Github Package registry.
        required: true
      GPR_KEY:
        description: A PAT with write access to Github Package registry.
        required: true
      ECR_REGISTRY:
        description: The AWS ECR registry where the image will be pushed to.
        required: true
      ECR_AWS_ACCESS_KEY_ID:
        description: An AWS access key ID that has write permissions to the registry.
        required: true
      ECR_AWS_SECRET_ACCESS_KEY:
        description: An AWS secret access key that has write permissions to the registry.
        required: true
      ECR_AWS_REGION:
        description: AWS region for the registry.
        required: true
      SLACK_NOTIFICATION_WEBHOOK_URL:
        description: A Slack webhook where workflow failures will be published to.
        required: true

jobs:
  pre_checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    outputs:
      should-skip: ${{ steps.skip-check.outputs.should_skip }}

    steps:
      - id: skip-check
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          concurrent_skipping: same_content
          do_not_skip: >-
            [
              "push",
              "schedule",
              "workflow_dispatch"
            ]
          paths: >-
            [
              ".tool-versions",
              "${{ inputs.workflow-path }}",
              "${{ inputs.working-directory }}/**",
              "backend/bff/src/main/**/interfaces/http/rest/**"
            ]
          skip_after_successful_duplicate: true

  setup:
    name: Setup
    needs:
      - pre_checks
    if: ${{ needs.pre_checks.outputs.should-skip != 'true' }}
    runs-on: ubuntu-latest
    outputs:
      name: ${{ inputs.name }}
      image-name: ${{ steps.names.outputs.image-name }}
      is-release: ${{ steps.metadata.outputs.is-release }}
      publishable: ${{ steps.metadata.outputs.publishable }}
      version: ${{ steps.metadata.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Find application metadata
        id: metadata
        uses: kronostechnologies/actions/application-metadata@v0.0.17

      - name: Compute artifact names
        id: names
        shell: bash
        run: |
          BASE_NAME=${{ inputs.name }}
          FULL_NAME=${BASE_NAME}-frontend

          IMAGE_NAME=${{ inputs.image-name }}
          if [[ "$IMAGE_NAME" == "" ]]; then
            IMAGE_NAME="$FULL_NAME"
          fi

          echo "::set-output name=image-name::${IMAGE_NAME}"

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.17

      - name: Install NPM dependencies
        uses: kronostechnologies/actions/yarn-install@v0.0.17
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Generate SDK
        uses: kronostechnologies/actions/generate-openapi-sdk@v0.0.17
        with:
          working-directory: backend
          gradle-project-path: bff
          generator-name: typescript
          publish: false
          gradle-properties: |
            application.version=${{ steps.metadata.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

      - name: Store SDK output
        uses: actions/upload-artifact@v2
        with:
          name: sdk_output
          path: backend/bff/sdk/
          retention-days: 1
          if-no-files-found: error

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    needs:
      - setup

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download SDK output
        uses: actions/download-artifact@v2
        with:
          name: sdk_output
          path: backend/bff/sdk/

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.17

      - name: Install NPM dependencies
        uses: kronostechnologies/actions/yarn-install@v0.0.17
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Run ESLint
        uses: kronostechnologies/actions/yarn-eslint@v0.0.17
        with:
          working-directory: ${{ inputs.working-directory }}

  stylelint:
    name: Stylelint
    runs-on: ubuntu-latest
    needs:
      - setup

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download SDK output
        uses: actions/download-artifact@v2
        with:
          name: sdk_output
          path: backend/bff/sdk/

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.17

      - name: Install NPM dependencies
        uses: kronostechnologies/actions/yarn-install@v0.0.17
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Run Stylelint
        uses: kronostechnologies/actions/yarn-stylelint@v0.0.17
        with:
          working-directory: ${{ inputs.working-directory }}

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs:
      - setup

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download SDK output
        uses: actions/download-artifact@v2
        with:
          name: sdk_output
          path: backend/bff/sdk/

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.17

      - name: Install NPM dependencies
        uses: kronostechnologies/actions/yarn-install@v0.0.17
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Run Jest
        uses: kronostechnologies/actions/yarn-jest@v0.0.17
        with:
          working-directory: ${{ inputs.working-directory }}

  compile:
    name: Compile
    runs-on: ubuntu-latest
    needs:
      - setup

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download SDK output
        uses: actions/download-artifact@v2
        with:
          name: sdk_output
          path: backend/bff/sdk/

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.17

      - name: Install NPM dependencies
        uses: kronostechnologies/actions/yarn-install@v0.0.17
        with:
          working-directory: ${{ inputs.working-directory }}

      - name: Compile
        working-directory: ${{ inputs.working-directory }}
        run: yarn build:production

  image:
    name: Build image
    runs-on: ubuntu-latest
    needs:
      - setup
      - eslint
      - stylelint
      - unit_tests
    if: needs.setup.outputs.publishable == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and push
        uses: kronostechnologies/actions/ecr-build-and-push@v0.0.17
        with:
          aws-ecr-registry: ${{ secrets.ECR_REGISTRY }}
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_AWS_REGION }}
          build-args: |
            APPLICATION_VERSION=${{ needs.setup.outputs.version }}
            GPR_USER=${{ secrets.GPR_USER }}
            GPR_KEY=${{ secrets.GPR_KEY }}
          name: ${{ needs.setup.outputs.image-name }}
          push: ${{ inputs.publish-image && needs.setup.outputs.is-release == 'true' }}
          version: ${{ needs.setup.outputs.version }}
          working-directory: ${{ inputs.working-directory }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs:
      - setup
      - eslint
      - stylelint
      - unit_tests
      - compile
      - image
    if: needs.setup.outputs.publishable == 'true'

    steps:
      - name: Post workflow status
        uses: kronostechnologies/actions/notify-workflow-status@v0.0.17
        with:
          needs: ${{ toJSON(needs) }}
          slack-webhook-url: ${{ secrets.SLACK_NOTIFICATION_WEBHOOK_URL }}
