name: Micronaut Gradle

on:
  workflow_call:
    inputs:
      name:
        description: "Application name. Used as base to generate jar name, image name, sdk name, etc..."
        required: true
        type: string
      gradle-subproject:
        description: "Gradle subproject name. ex: bff"
        required: true
        type: string
      checks:
        description: |
          List of enabled check separated by comma.
          default: static_analysis,unit_tests,lint_dockerfiles
          available checks: static_analysis,unit_tests,e2e_tests,lint_dockerfiles
        required: false
        default: "static_analysis,unit_tests,lint_dockerfiles"
        type: string
      image-name:
        description: "Allow to specify a docker image name. By default the image-name is generated from the name and subproject."
        required: false
        type: string
        default: ""
      publish-image:
        description: |
          Set to `true` to enable Docker image publication. This will typically only be `false` until the ECR repository is created.
          Defaults to false.
        required: false
        default: true
        type: boolean
      enable-openapi:
        description: "Enable openapi"
        required: false
        default: false
        type: boolean
      openapi-file-prefix:
        description: "Prefix for the openapi.yml file. Usually a snake-case of the @OpenAPIDefinition title."
        required: false
        default: ""
        type: string
      enable-openapi-sdk:
        description: "Comma separated list of SDKs to generate. ie: 'php,typescript,micronaut,kotlin'"
        required: false
        default: ""
        type: string
      publish-openapi-sdk:
        description: |
          `true` to publish built SDKs. BFF backends will usually turn this off whilst micro-services will enable publication.

          Defaults to false.
        required: false
        default: false
        type: boolean
      workflow-path:
        description: "Workflow file path allowing changes detection"
        default: ".github/workflows/micronaut-gradle.yml"
        required: false
        type: string
      working-directory:
        description: "Workflow working directory"
        default: '.'
        required: false
        type: string
    secrets:
      GPR_USER:
        description: A username with write access to Github Package registry.
        required: true
      GPR_KEY:
        description: A PAT with write access to Github Package registry.
        required: true
      ECR_REGISTRY:
        description: The AWS ECR registry where the image will be pushed to.
        required: true
      ECR_AWS_ACCESS_KEY_ID:
        description: An AWS access key ID that has write permissions to the registry.
        required: true
      ECR_AWS_SECRET_ACCESS_KEY:
        description: An AWS secret access key that has write permissions to the registry.
        required: true
      ECR_AWS_REGION:
        description: AWS region for the registry.
        required: true
      SLACK_NOTIFICATION_WEBHOOK_URL:
        description: A Slack webhook where workflow failures will be published to.
        required: true

jobs:
  pre_checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          concurrent_skipping: same_content
          do_not_skip: >-
            [
              "push",
              "schedule",
              "workflow_dispatch"
            ]
          paths: >-
            [
              "${{ inputs.workflow-path }}",
              ".tool-versions",
              "${{ inputs.working-directory }}/**"
            ]
          skip_after_successful_duplicate: true

  setup:
    name: Setup
    needs: [pre_checks]
    if: needs.pre_checks.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    outputs:
      gradle-prefix: ${{ steps.build-metadata.outputs.gradle-prefix }}
      gradle-project-dir: ${{ steps.build-metadata.outputs.gradle-project-dir }}
      image-name: ${{ steps.build-metadata.outputs.image-name }}
      is-release: ${{ steps.metadata.outputs.is-release }}
      jar-name: ${{ steps.build-metadata.outputs.jar-name }}
      openapi-file: ${{ steps.build-metadata.outputs.openapi-file }}
      publishable: ${{ steps.metadata.outputs.publishable }}
      sdk-generators-matrix: ${{ steps.build-metadata.outputs.sdk-generators-matrix }}
      version: ${{ steps.metadata.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Find application metadata
        id: metadata
        uses: kronostechnologies/actions/application-metadata@v0.0.14

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.14

      - name: Find gradle project metadata
        id: build-metadata
        shell: bash
        run: |
          BASE_NAME=${{ inputs.name }}
          FULL_NAME=$BASE_NAME
          GRADLE_SUBPROJECT=${{ inputs.gradle-subproject }}
          GRADLE_PREFIX=
          GRADLE_PROJECT_DIR=${{ inputs.working-directory }}
          VERSION=${{ steps.metadata.outputs.version }}

          JAR_NAME="$BASE_NAME-$VERSION-all.jar"

          if [[ "$GRADLE_SUBPROJECT" != "" ]]; then
            FULL_NAME="$BASE_NAME-$GRADLE_SUBPROJECT"
            GRADLE_PREFIX=":$GRADLE_SUBPROJECT"
            GRADLE_PROJECT_DIR="$GRADLE_PROJECT_DIR/$GRADLE_SUBPROJECT"
            JAR_NAME="$GRADLE_SUBPROJECT-$VERSION-all.jar"
          fi

          IMAGE_NAME=${{ inputs.image-name }}
          if [[ "$IMAGE_NAME" == "" ]]; then
            IMAGE_NAME="$FULL_NAME"
          fi

          OPENAPI_FILE_PREFIX=${{ inputs.openapi-file-prefix }}
          if [[ "$OPENAPI_FILE_PREFIX" == "" ]]; then
            OPENAPI_FILE_PREFIX="$FULL_NAME"
          fi
          OPENAPI_FILE="$OPENAPI_FILE_PREFIX-$VERSION.yml"

          echo "::set-output name=image-name::${IMAGE_NAME}"
          echo "::set-output name=gradle-prefix::${GRADLE_PREFIX}"
          echo "::set-output name=gradle-project-dir::${GRADLE_PROJECT_DIR}"
          echo "::set-output name=jar-name::${JAR_NAME}"
          echo "::set-output name=openapi-file::${OPENAPI_FILE}"

          sdk_generators_input="${{ inputs.enable-openapi-sdk }}"
          sdk_generators_input="${sdk_generators_input//,/$'\n'}"
          sdk_generators=(${sdk_generators_input//,/ })
          sdk_generators_json=$(jq --compact-output --null-input '$ARGS.positional' --args "${sdk_generators[@]}")
          echo "::set-output name=sdk-generators-matrix::$sdk_generators_json"

  compile:
    name: Compile
    runs-on: ubuntu-latest
    needs:
     - setup

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.14

      - name: Compile source and test code
        uses: burrunan/gradle-cache-action@v1.10
        with:
          gradle-version: wrapper
          build-root-directory: ${{ inputs.working-directory }}
          gradle-dependencies-cache-key: buildSrc/**/Dependencies.kt
          arguments: ${{ needs.setup.outputs.gradle-prefix }}:ci-classes
          properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

      - name: Upload OpenAPI spec
        uses: actions/upload-artifact@v2
        if: success() && inputs.enable-openapi
        with:
          name: openapi-${{ needs.setup.outputs.openapi-file }}
          path: ${{ needs.setup.outputs.gradle-project-dir }}/build/tmp/kapt3/classes/main/META-INF/swagger/${{ needs.setup.outputs.openapi-file }}
          retention-days: 5
          if-no-files-found: error

  static_analysis:
    name: Static analysis
    runs-on: ubuntu-latest
    needs: [setup, compile]
    if: contains(inputs.checks, 'static_analysis')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.14

      - name: Run static check analysis
        uses: burrunan/gradle-cache-action@v1.10
        with:
          gradle-version: wrapper
          build-root-directory: ${{ inputs.working-directory }}
          gradle-dependencies-cache-key: buildSrc/**/Dependencies.kt
          arguments: ${{ needs.setup.outputs.gradle-prefix }}:ci-check
          properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

      - name: Upload results
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: static-check-reports
          path: |
            ${{ needs.setup.outputs.gradle-project-dir }}/build/reports/detekt
            ${{ needs.setup.outputs.gradle-project-dir }}/build/reports/ktlint
          retention-days: 5

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: [setup, compile]
    if: contains(inputs.checks, 'unit_tests')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.14

      - name: Run unit tests
        uses: kronostechnologies/actions/gradle-junit@v0.0.14
        with:
          working-directory: ${{ inputs.working-directory }}
          gradle-project-path: ${{ inputs.gradle-subproject }}
          task-name: unit-tests
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

  e2e_tests:
    name: E2E tests
    runs-on: ubuntu-latest
    needs: [setup, compile]
    if: contains(inputs.checks, 'e2e_tests')

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.14

      - name: Run e2e tests
        uses: kronostechnologies/actions/gradle-junit@v0.0.14
        with:
          working-directory: ${{ inputs.working-directory }}
          gradle-project-path: ${{ inputs.gradle-subproject }}
          task-name: e2e-tests
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

  test_coverage_verification:
    name: Test coverage verification
    runs-on: ubuntu-latest
    needs: [setup, unit_tests, e2e_tests]
    if: |
      !failure() &&
      !cancelled() &&
      (contains(inputs.checks, 'unit_tests') || contains(inputs.checks, 'e2e_tests')) &&
      (success('unit_tests') || success('e2e_tests'))

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.14

      - name: Validate test coverage
        uses: kronostechnologies/actions/gradle-jacoco-check@v0.0.14
        with:
          working-directory: ${{ inputs.working-directory }}
          gradle-project-path: ${{ inputs.gradle-subproject }}
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

  binary:
    name: Binary
    runs-on: ubuntu-latest
    needs: [setup, compile]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.14

      - name: Assemble JAR
        uses: burrunan/gradle-cache-action@v1.10
        with:
          gradle-version: wrapper
          build-root-directory: ${{ inputs.working-directory }}
          gradle-dependencies-cache-key: buildSrc/**/Dependencies.kt
          arguments: ${{ needs.setup.outputs.gradle-prefix }}:assemble
          properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

      - name: Upload JAR
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: ${{ needs.setup.outputs.jar-name }}
          path: ${{ needs.setup.outputs.gradle-project-dir }}/build/libs/${{ needs.setup.outputs.jar-name }}
          retention-days: 5
          if-no-files-found: error

  lint_dockerfiles:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    needs: [setup]
    if: contains(inputs.checks, 'lint_dockerfiles')

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Validate Dockerfile
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: ${{ needs.setup.outputs.gradle-project-dir }}/Dockerfile

  image:
    name: Build image
    runs-on: ubuntu-latest
    needs: [setup, lint_dockerfiles, static_analysis, test_coverage_verification]
    if: |
      needs.setup.outputs.publishable == 'true' &&
      !failure() &&
      !cancelled() &&
      (! (contains(inputs.checks, 'unit_tests') && contains(inputs.checks, 'e2e_tests')) || success('test_coverage_verification')) &&
      (!contains(inputs.checks, 'static_analysis') || success('static_analysis')) &&
      (!contains(inputs.checks, 'lint_dockerfiles') || success('lint_dockerfiles'))

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and push
        uses: kronostechnologies/actions/ecr-build-and-push@v0.0.14
        with:
          aws-ecr-registry: ${{ secrets.ECR_REGISTRY }}
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_AWS_REGION }}
          build-args: |
            APPLICATION_VERSION=${{ needs.setup.outputs.version }}
            GPR_USER=${{ secrets.GPR_USER }}
            GPR_KEY=${{ secrets.GPR_KEY }}
          name: ${{ needs.setup.outputs.image-name }}
          push: ${{ inputs.publish-image && needs.setup.outputs.is-release == 'true' }}
          version: ${{ needs.setup.outputs.version }}
          working-directory: ${{ needs.setup.outputs.gradle-project-dir }}

  generate_sdk:
    strategy:
      matrix:
        generator: ${{ fromJSON(needs.setup.outputs.sdk-generators-matrix) }}
    name: Generate ${{ matrix.generator }} SDK
    runs-on: ubuntu-latest
    needs:
      - setup
      - binary
      - static_analysis
      - test_coverage_verification
    if: |
      !failure() &&
      !cancelled() &&
      (! (contains(inputs.checks, 'unit_tests') && contains(inputs.checks, 'e2e_tests')) || success('test_coverage_verification')) &&
      (!contains(inputs.checks, 'static_analysis') || success('static_analysis'))

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup asdf-vm
        uses: kronostechnologies/actions/with-asdf-vm@v0.0.14

      - name: Generate SDK
        uses: kronostechnologies/actions/generate-openapi-sdk@v0.0.14
        with:
          working-directory: ${{ inputs.working-directory }}
          gradle-project-path: ${{ inputs.gradle-subproject }}
          generator-name: ${{ matrix.generator }}
          publish: ${{ inputs.publish-openapi-sdk && needs.setup.outputs.publishable == 'true' }}
          publish-pat: ${{ secrets.GPR_KEY }}
          gradle-properties: |
            application.version=${{ needs.setup.outputs.version }}
            gpr.user=${{ secrets.GPR_USER }}
            gpr.key=${{ secrets.GPR_KEY }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs:
      - setup
      - compile
      - static_analysis
      - unit_tests
      - e2e_tests
      - test_coverage_verification
      - binary
      - lint_dockerfiles
      - image
      - generate_sdk
    if: failure() && needs.setup.outputs.publishable == 'true'

    steps:
      - name: Post workflow status
        uses: kronostechnologies/actions/notify-workflow-status@v0.0.14
        with:
          needs: ${{ toJSON(needs) }}
          slack-webhook-url: ${{ secrets.SLACK_NOTIFICATION_WEBHOOK_URL }}
